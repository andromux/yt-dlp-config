#!/data/data/com.termux/files/usr/bin/bash

# Script para crear y actualizar yt-dlp-config.tar.gz automáticamente
# Autor: Script de automatización
# Versión: 1.0

set -e  # Salir si hay algún error

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Función para imprimir mensajes
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[✓]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_error() {
    echo -e "${RED}[✗]${NC} $1"
}

# Configuración de rutas
HOME_DIR="$HOME"
CONFIG_FILE="$HOME_DIR/.config/yt-dlp.conf"
REPO_DIR="$HOME_DIR/git-repos/yt-dlp-config"
TAR_DIR="$REPO_DIR/tar"
TAR_FILE="$TAR_DIR/yt-dlp-config.tar.gz"

print_status "=== Automatizador de yt-dlp-config.tar.gz ==="
echo ""

# Verificar que existe el archivo de configuración
if [ ! -f "$CONFIG_FILE" ]; then
    print_error "No se encontró el archivo de configuración: $CONFIG_FILE"
    print_status "Asegúrate de que existe ~/.config/yt-dlp.conf"
    exit 1
fi

print_success "Archivo de configuración encontrado: $CONFIG_FILE"

# Verificar que existe el directorio del repositorio
if [ ! -d "$REPO_DIR" ]; then
    print_error "No se encontró el directorio del repositorio: $REPO_DIR"
    print_status "Asegúrate de que el repositorio está clonado en la ruta correcta"
    exit 1
fi

print_success "Directorio del repositorio encontrado: $REPO_DIR"

# Crear directorio tar si no existe
if [ ! -d "$TAR_DIR" ]; then
    print_warning "Directorio tar no existe, creándolo..."
    mkdir -p "$TAR_DIR"
    print_success "Directorio creado: $TAR_DIR"
fi

# Mostrar información del archivo actual
print_status "Información del archivo de configuración:"
echo -e "${YELLOW}  Ubicación: $CONFIG_FILE${NC}"
echo -e "${YELLOW}  Tamaño: $(du -h "$CONFIG_FILE" | cut -f1)${NC}"
echo -e "${YELLOW}  Modificado: $(stat -c %y "$CONFIG_FILE" | cut -d. -f1)${NC}"

# Backup del tar anterior si existe
if [ -f "$TAR_FILE" ]; then
    BACKUP_FILE="$TAR_DIR/yt-dlp-config.tar.gz.backup.$(date +%Y%m%d_%H%M%S)"
    print_warning "Tar anterior encontrado, creando backup..."
    cp "$TAR_FILE" "$BACKUP_FILE"
    print_success "Backup creado: $(basename "$BACKUP_FILE")"
fi

# Cambiar al directorio HOME para crear el tar con estructura correcta
cd "$HOME_DIR"
print_status "Cambiando a directorio: $(pwd)"

# Crear el nuevo archivo tar
print_status "Creando nuevo archivo tar.gz..."
if tar -czf "$TAR_FILE" .config/yt-dlp.conf; then
    print_success "Archivo tar.gz creado exitosamente"
else
    print_error "Error al crear el archivo tar.gz"
    exit 1
fi

# Verificar el contenido del tar
print_status "Verificando contenido del archivo tar:"
echo -e "${YELLOW}$(tar -tzf "$TAR_FILE")${NC}"

# Mostrar información del nuevo tar
print_status "Información del nuevo archivo tar:"
echo -e "${YELLOW}  Ubicación: $TAR_FILE${NC}"
echo -e "${YELLOW}  Tamaño: $(du -h "$TAR_FILE" | cut -f1)${NC}"
echo -e "${YELLOW}  Creado: $(date)${NC}"

# Verificar integridad
print_status "Verificando integridad del archivo..."
if tar -tzf "$TAR_FILE" >/dev/null 2>&1; then
    print_success "Archivo tar.gz válido y funcional"
else
    print_error "Error: El archivo tar.gz está corrupto"
    exit 1
fi

# Cambiar al directorio del repositorio para git
cd "$REPO_DIR"
print_status "Cambiando a directorio del repositorio: $(pwd)"

# Verificar estado de git
print_status "Estado del repositorio git:"
if git status --porcelain | grep -q "tar/yt-dlp-config.tar.gz"; then
    print_warning "El archivo tar tiene cambios pendientes en git"
else
    print_status "Verificando si hay cambios en el archivo tar..."
fi

# Mostrar estadísticas de compresión
ORIGINAL_SIZE=$(wc -c < "$CONFIG_FILE")
COMPRESSED_SIZE=$(wc -c < "$TAR_FILE")
COMPRESSION_RATIO=$(echo "scale=1; ($COMPRESSED_SIZE * 100) / $ORIGINAL_SIZE" | bc 2>/dev/null || echo "N/A")

print_success "=== Proceso completado exitosamente ==="
echo ""
print_status "Estadísticas:"
echo -e "${YELLOW}  Archivo original: ${ORIGINAL_SIZE} bytes${NC}"
echo -e "${YELLOW}  Archivo comprimido: ${COMPRESSED_SIZE} bytes${NC}"
echo -e "${YELLOW}  Ratio de compresión: ${COMPRESSION_RATIO}%${NC}"
echo ""

# Sugerencias para siguiente paso
print_status "Próximos pasos sugeridos:"
echo -e "${BLUE}  1. Revisar cambios: ${YELLOW}git status${NC}"
echo -e "${BLUE}  2. Agregar cambios: ${YELLOW}git add tar/yt-dlp-config.tar.gz${NC}"
echo -e "${BLUE}  3. Hacer commit: ${YELLOW}git commit -m 'Actualizar yt-dlp-config.tar.gz'${NC}"
echo -e "${BLUE}  4. Subir cambios: ${YELLOW}git push${NC}"

echo ""
print_success "¡Archivo tar.gz actualizado y listo para commit!"

# Subida automática a Git
print_status "=== Iniciando subida automática a Git ==="

# Verificar que estamos en un repositorio git
if [ ! -d ".git" ]; then
    print_error "No se encontró repositorio git en: $(pwd)"
    exit 1
fi

# Generar mensaje de commit automático con timestamp y info
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
CONFIG_HASH=$(md5sum "$CONFIG_FILE" | cut -d' ' -f1 | head -c8)
COMMIT_MSG="Actualizar yt-dlp-config.tar.gz - ${TIMESTAMP} [${CONFIG_HASH}]"

print_status "Mensaje de commit: $COMMIT_MSG"

# Agregar solo el archivo tar específico
print_status "Agregando archivo tar al staging area..."
if git add tar/yt-dlp-config.tar.gz; then
    print_success "Archivo agregado exitosamente"
else
    print_error "Error al agregar el archivo al staging area"
    exit 1
fi

# Verificar si hay cambios para commitear
if git diff --cached --quiet; then
    print_warning "No hay cambios para commitear"
    print_status "El archivo tar ya está actualizado en el repositorio"
else
    # Hacer commit
    print_status "Haciendo commit..."
    if git commit -m "$COMMIT_MSG"; then
        print_success "Commit realizado exitosamente"
    else
        print_error "Error al hacer commit"
        exit 1
    fi
    
    # Asegurar que estamos en rama main
    print_status "Verificando rama actual..."
    CURRENT_BRANCH=$(git branch --show-current)
    if [ "$CURRENT_BRANCH" != "main" ]; then
        print_status "Cambiando a rama main..."
        git branch -M main
        print_success "Rama cambiada a main"
    else
        print_success "Ya estamos en la rama main"
    fi
    
    # Push automático
    print_status "Subiendo cambios al repositorio remoto..."
    if git push -u origin main; then
        print_success "Cambios subidos exitosamente a GitHub"
    else
        print_error "Error al subir cambios"
        print_warning "Intenta ejecutar manualmente: git push -u origin main"
        exit 1
    fi
fi

# Mostrar estado final
print_success "=== Proceso completado exitosamente ==="
echo ""
print_status "Resumen final:"
echo -e "${YELLOW}  • Archivo tar creado y verificado ✓${NC}"
echo -e "${YELLOW}  • Commit realizado: ${CONFIG_HASH} ✓${NC}"
echo -e "${YELLOW}  • Cambios subidos a GitHub ✓${NC}"
echo -e "${YELLOW}  • Timestamp: ${TIMESTAMP} ✓${NC}"

# Mostrar información del commit más reciente
echo ""
print_status "Último commit:"
git log -1 --oneline 2>/dev/null || true

echo ""
print_success "¡Tu configuración yt-dlp está ahora disponible en GitHub!"
print_status "Los usuarios pueden descargarla con el script obtener-config"
